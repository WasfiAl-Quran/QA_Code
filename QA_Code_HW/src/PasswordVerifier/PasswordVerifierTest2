package PasswordVerifier;

import org.junit.Test;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.CoreMatchers.containsString;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class PasswordVerifierTest2 {

    PasswordVerifier2 PasswordVerifier = new PasswordVerifier2();

    @Test
    public void passwordShouldBeLargerThan8Chars(){
        IllegalArgumentException thrown = assertThrows(
                IllegalArgumentException.class,
                () -> PasswordVerifier.Verify("aAAA11a")
        );
        assertThat(thrown.getMessage(), containsString("password should be larger than 8 chars"));
    }

    @Test
    public void passwordShouldNotBeNull(){
        IllegalArgumentException thrown = assertThrows(
                IllegalArgumentException.class,
                () -> PasswordVerifier.Verify("")
        );
        assertThat(thrown.getMessage(), containsString("password should not be null"));
    }

    @Test
    public void passwordShouldHaveOneUppercaseLetterAtLeast(){
        IllegalArgumentException thrown = assertThrows(
                IllegalArgumentException.class,
                () -> PasswordVerifier.Verify("aaaaaa11a")
        );
        assertThat(thrown.getMessage(), containsString("password should have one uppercase letter at least"));
    }

    @Test
    public void passwordShouldHaveOneLowercaseLetterAtLeast(){
        IllegalArgumentException thrown = assertThrows(
                IllegalArgumentException.class,
                () -> PasswordVerifier.Verify("AAAAAAAA")
        );
        assertThat(thrown.getMessage(), containsString("password should have one lowercase letter at least"));
    }

    @Test
    public void passwordShouldHaveOneNumberAtLeast(){
        IllegalArgumentException thrown = assertThrows(
                IllegalArgumentException.class,
                () -> PasswordVerifier.Verify("aAAAAAAAa")
        );
        assertThat(thrown.getMessage(), containsString("password should have one number at least"));
    }

    @Test
    public void ifThreeConditions_areTrue_return_PasswordIsOK_case1(){
        IllegalArgumentException thrown = assertThrows(
                IllegalArgumentException.class,
                () -> PasswordVerifier.Verify("8888888Cs")
        );
        assertThat(thrown.getMessage(), containsString("Password is OK"));
    }

    @Test
    public void ifThreeConditions_areTrue_return_PasswordIsOK_case2(){
        IllegalArgumentException thrown = assertThrows(
                IllegalArgumentException.class,
                () -> PasswordVerifier.Verify("8888888s1")
        );
        assertThat(thrown.getMessage(), containsString("Password is OK"));
    }

    @Test
    public void ifThreeConditions_areTrue_return_PasswordIsOK_case3(){
        IllegalArgumentException thrown = assertThrows(
                IllegalArgumentException.class,
                () -> PasswordVerifier.Verify("CCCCCCCCs")
        );
        assertThat(thrown.getMessage(), containsString("Password is OK"));
    }

    @Test
    public void ifThreeConditions_areTrue_return_PasswordIsOK_case4(){
        IllegalArgumentException thrown = assertThrows(
                IllegalArgumentException.class,
                () -> PasswordVerifier.Verify("88888888s")
        );
        assertThat(thrown.getMessage(), containsString("Password is OK"));
    }

    @Test
    public void ifThreeConditions_areTrue_return_PasswordIsOK_case5(){
        IllegalArgumentException thrown = assertThrows(
                IllegalArgumentException.class,
                () -> PasswordVerifier.Verify("sssssssss")
        );
        assertThat(thrown.getMessage(), containsString("Password is OK"));
    }

    @Test
    public void ifThreeConditions_areTrue_return_PasswordIsOK_case6(){
        IllegalArgumentException thrown = assertThrows(
                IllegalArgumentException.class,
                () -> PasswordVerifier.Verify("Cs1")
        );
        assertThat(thrown.getMessage(), containsString("Password is OK"));
    }

    @Test
    public void ifThreeConditions_areTrue_return_PasswordIsOK_case7(){
        IllegalArgumentException thrown = assertThrows(
                IllegalArgumentException.class,
                () -> PasswordVerifier.Verify("Cs")
        );
        assertThat(thrown.getMessage(), containsString("Password is OK"));
    }

    @Test
    public void ifThreeConditions_areTrue_return_PasswordIsOK_case8(){
        IllegalArgumentException thrown = assertThrows(
                IllegalArgumentException.class,
                () -> PasswordVerifier.Verify("s1")
        );
        assertThat(thrown.getMessage(), containsString("Password is OK"));
    }

    @Test
    public void ifNotOneLowercaseLetterAtLeast_return_PasswordIsNeverOK_case1(){
        IllegalArgumentException thrown = assertThrows(
                IllegalArgumentException.class,
                () -> PasswordVerifier.Verify("AAAAA11A")
        );
        assertThat(thrown.getMessage(), containsString("Password is never OK"));
    }

    @Test
    public void ifThreeConditions_areTrue_return_PasswordIsNeverOK_case2(){
        IllegalArgumentException thrown = assertThrows(
                IllegalArgumentException.class,
                () -> PasswordVerifier.Verify("88888888C")
        );
        assertThat(thrown.getMessage(), containsString("Password is never OK"));
    }

    @Test
    public void ifThreeConditions_areTrue_return_PasswordIsNeverOK_case3(){
        IllegalArgumentException thrown = assertThrows(
                IllegalArgumentException.class,
                () -> PasswordVerifier.Verify("C1")
        );
        assertThat(thrown.getMessage(), containsString("Password is never OK"));
    }

    @Test
    public void ifThreeConditions_areTrue_return_PasswordIsNeverOK_case4(){
        IllegalArgumentException thrown = assertThrows(
                IllegalArgumentException.class,
                () -> PasswordVerifier.Verify("888888881")
        );
        assertThat(thrown.getMessage(), containsString("Password is never OK"));
    }

    @Test
    public void ifThreeConditions_areTrue_return_PasswordIsNeverOK_case5(){
        IllegalArgumentException thrown = assertThrows(
                IllegalArgumentException.class,
                () -> PasswordVerifier.Verify("888888888")
        );
        assertThat(thrown.getMessage(), containsString("Password is never OK"));
    }

    @Test
    public void ifThreeConditions_areTrue_return_PasswordIsNeverOK_case6(){
        IllegalArgumentException thrown = assertThrows(
                IllegalArgumentException.class,
                () -> PasswordVerifier.Verify("CCCCCCCCC")
        );
        assertThat(thrown.getMessage(), containsString("Password is never OK"));
    }

    @Test
    public void ifThreeConditions_areTrue_PasswordIsNeverOK_case7(){
        IllegalArgumentException thrown = assertThrows(
                IllegalArgumentException.class,
                () -> PasswordVerifier.Verify("8888888C1")
        );
        assertThat(thrown.getMessage(), containsString("Password is never OK"));
    }
}
